<?phpclass AdministrationEltern extends AbstractPage {	private $info;		private static $allGroups = array();	private static $currentGroups = array();	private static $groupBeschreibungen = array();		private static $showMessage = "";		public function __construct() {		parent::__construct(array("Administration", "Benutzeradministration"));				self::checkLogin();				new errorPage();	}	public function execute() {}		public static function displayAdministration($selfURL) {		$pages = requesthandler::getAllowedActions();				for($i = 0; $i < sizeof($pages); $i++)  {							$site = $pages[$i];			if($site != "error") {				$classOK = false;						if(class_exists($site)) {					$classOK = !false;				}				else if(class_exists($site . "Page")) {					$site = $site . "Page";					$classOK = !false;				}						if($classOK) {					$groups = $site::getUserGroups();					for($g = 0; $g < sizeof($groups); $g++) {						self::$allGroups[] = $groups[$g];						self::$groupBeschreibungen[$groups[$g]['groupName']] = $groups[$g]['beschreibung'];					}				}			}		}						return self::doIT($selfURL);	}		private static function doIT($selfURL) {				switch($_GET['action']) {			case 'addUserAsAdmin':				if(DB::getGlobalSettings()->schulnummer == "9400" && DB::getUserID() != 1) {					new errorPage("In der Demo Version ist keine Änderung der Gruppen möglich!");				}												$user = DB::getDB()->query_first("SELECT * FROM users WHERE userID='" . intval($_GET['userID']) . "'");				if($user['userID'] > 0) {					DB::getDB()->query("INSERT INTO users_groups (userID,groupName) values('" . intval($_GET['userID']) . "','Webportal_Administrator') ON DUPLICATE KEY UPDATE groupName=groupName");					self::$showMessage = "Der Benutzer \"" . $user['userName'] . "\" wurde erfolgreich als Administrator hinzugefügt!";				}								return self::showIndex($selfURL);								break;							case 'deleteUserAsAdmin':								if(DB::getGlobalSettings()->schulnummer == "9400" && DB::getUserID() != 1) {					new errorPage("In der Demo Version ist keine Änderung der Gruppen möglich!");				}								$user = DB::getDB()->query_first("SELECT * FROM users WHERE userID='" . intval($_GET['userID']) . "'");				if($user['userID'] > 0) {				    DB::getDB()->query("DELETE FROM users_groups WHERE userID='" . intval($_GET['userID']) . "' AND groupName='Webportal_Administrator'");					self::$showMessage = "Der Benutzer \"" . $user['userName'] . "\" wurde erfolgreich als Administrator entfernt!";				}								return self::showIndex($selfURL);								break;						case 'resetPassword':				if(DB::getGlobalSettings()->schulnummer == "9400") {					new errorPage("In der Demo Version ist keine Passwort Änderung möglich!");				}								$user = user::getUserByID(intval($_REQUEST['userID']));				if($user != null) {                    if($user->isEltern()) {                        $user->setPassword($_REQUEST['password']);                        self::$showMessage = "Passwort wurde geändert für " . $user->getUserName() . "";                    }                    else {                        self::$showMessage = "Ist kein Elternbenutzer: " . $user->getUserName() . "";                    }                }				else {                    self::$showMessage = "Nicht vorhanden: " . $_REQUEST['userID'] . "";				}				return self::showIndex($selfURL);			break;			case "deleteUser":			    $user = user::getUserByID(intval($_GET['userID']) );			    if($user->isEltern()) {			        if(DB::getGlobalSettings()->elternUserMode == "ASV_CODE") {                        $user->deleteUser();                    }			        else {			            new errorPage("Elternbenutzer können nur gelöscht werden, in dem sie aus der ASV entfernt werden.");                    }                }			    else {			        new errorPage("Benutzer ist nicht Eltern.");                }				self::$showMessage = "Der Benutzer wurde gelöscht";				return self::showIndex($selfURL);			break;							default:				return self::showIndex($selfURL);			break;		}	}		private function showIndex($selfURL) {		$tabs = "";		$network = "SCHULEINTERN_ELTERN";		$users = user::getAllEltern();				$userHTML = "";		for($i = 0; $i < sizeof($users); $i++) {			$isAdmin = $users[$i]->isAdmin();            $zugeordneteKinder = "";            $kinder = $users[$i]->getElternObject()->getMySchueler();            for($k = 0; $k < sizeof($kinder); $k++) {                $zugeordneteKinder .= $kinder[$k]->getCompleteSchuelerName() . " (Klasse " . $kinder[$k]->getKlasse() . ")<br />";            }			eval("\$userHTML .= \"" . DB::getTPL()->get("administration/eltern/user_bit") . "\";");		}				if(self::$showMessage != "") {			self::$showMessage = "<div class=\"callout callout-info\">" . self::$showMessage . "</div>";		}				$html = "";				eval("\$html = \"" . DB::getTPL()->get("administration/eltern/index") . "\";");				return $html;	}		public static function hasSettings() {		return DB::getGlobalSettings()->elternUserMode == 'ASV_MAIL';	}		/**	 * Stellt eine Beschreibung der Einstellungen bereit, die für das Modul nötig sind.	 * @return array(String, String)	 * array(	 * 	   array(	 * 		'name' => "Name der Einstellung (z.B. formblatt-isActive)",	 *		'typ' => ZEILE | TEXT | NUMMER | BOOLEAN,	 *      'titel' => "Titel der Beschreibung",	 *      'text' => "Text der Beschreibung"	 *     )	 *     ,	 *     .	 *     .	 *     .	 *  )	 */	public static function getSettingsDescription() {		if(DB::getGlobalSettings()->elternUserMode == 'ASV_MAIL') {			return array(			array(					"name" => "elternmail-create-users",					"typ" => "BOOLEAN",					"titel" => "Neue Elternbenutzer erstellen?",					"text" => "Solange diese Option nicht aktiv ist, werden neue Elternbenutzer nicht erstellt."			),			array(					"name" => "elternmail-subjectnewuser",					"typ" => "ZEILE",					"titel" => "Neuer Elternbenutzer - Betreff",					"text" => "Betreff der E-Mail an die Eltern, die sich neu registriert haben."			),			array(					"name" => "elternmail-textnewuser",					"typ" => "TEXT",					"titel" => "Neuer Elternbenutzer - Text",					"text" => "Text der E-Mail an die Eltern, die sich neu registriert haben.<br />Platzhalter: Benutzername: {BENUTZERNAME}<br />Passwort: {PASSWORT}"			));		}		else return [];	}			public static function getSiteDisplayName() {		return 'Elternbenutzer';	}		/**	 * Liest alle Nutzergruppen aus, die diese Seite verwendet. (Für die Benutzeradministration)	 * @return array(array('groupName' => '', 'beschreibung' => ''))	 */	public static function getUserGroups() {		return array();		}		public static function siteIsAlwaysActive() {		return true;	}		public static function hasAdmin() {		return true;	}		public static function getAdminMenuGroup() {		return 'Benutzerverwaltung';	}		public static function getAdminMenuGroupIcon() {		return 'fa fa-users';	}		public static function getAdminMenuIcon() {		return 'fa fa-users';	}}?>